---
import agencyFBBold from "./../../assets/fonts/AgencyFB-Bold.woff2";
import agencyFBRegular from "./../../assets/fonts/AgencyFB-Reg.woff2";

import { Aside, Footer, Header } from "./../organisms";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link
      rel="preload"
      href={agencyFBRegular}
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href={agencyFBBold}
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <title>Morros Training</title>
  </head>
  <body>
    <Header />
    <Aside />
    <main>
      <slot />
    </main>
    <Footer />
  </body>
</html>

<style is:global>
  @import url("../../css/normalize.css");
  @import url("../../css/custom/colors.css");
  @import url("../../css/custom/font.css");
  @import url("../../css/custom/font-weights.css");
  @import url("../../css/custom/font-sizes.css");
  @import url("../../css/custom/border.css");

  :root {
    --max-width: 90rem;
  }

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  html {
    scroll-behavior: smooth;
    scroll-padding-top: 5rem;
  }

  body {
    min-height: 100dvh;
    font-family: "Agency FB", sans-serif;
    display: grid;
    grid-template-rows: 7rem 1fr auto;
    scrollbar-gutter: stable;
    color: var(--primary-text);
    background-color: var(--background);
  }

  main {
    min-height: calc(100dvh - 7rem);
  }

  section {
    justify-self: center;
    width: min(100%, var(--max-width));
  }

  .box-animation {
    opacity: 0;
  }

  .visible {
    animation: slide-up ease-in-out 0.7s both;
  }

  @keyframes slide-up {
    0% {
      transform: translateY(2rem);
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  section[data-width="full"] {
    width: 100%;
  }
</style>

<script>
  import { $, $$ } from "./../../lib/dom-selector";
  let menuOpen = false;

  const hamburgerMenuButton = $("#menu-button-hamburger")!;
  const backgroundAside = $(".background-aside")!;
  const menuAside = $(".aside")!;
  const linksAside = $$(".links-aside");
  const logoHeader = $(".logotipo-header")!;

  function openMenu() {
    hamburgerMenuButton.classList.add("menu-button-active");
    hamburgerMenuButton.setAttribute("aria-expanded", "true");
    menuAside.setAttribute("data-open", "true");
    backgroundAside.setAttribute("data-open", "true");
    logoHeader.setAttribute("data-isMobile", "true");
    document.body.style.overflow = "hidden";
    menuOpen = true;
  }

  linksAside.forEach((link) => {
    link.addEventListener("click", () => {
      closeMenu();
    });
  });

  function closeMenu() {
    hamburgerMenuButton.classList.remove("menu-button-active");
    hamburgerMenuButton.setAttribute("aria-expanded", "false");
    menuAside.setAttribute("data-open", "false");
    backgroundAside.setAttribute("data-open", "false");
    logoHeader.removeAttribute("data-isMobile");
    document.body.style.overflow = "auto";
    menuOpen = false;
  }

  hamburgerMenuButton.addEventListener("click", () => {
    if (!menuOpen) openMenu();
    else closeMenu();
  });

  const animatedBoxes = $$(".box-animation");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target);
        }
      });
    },
    { threshold: 0.2 }
  );

  animatedBoxes.forEach((el) => observer.observe(el));
</script>
